var searchIndex = JSON.parse('{\
"rust_quiz_2021":{"doc":"","t":[14,14,0,0,0,0,0,0,0,0,13,13,13,4,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,0,0,0,8,10,10,0,10,0,8,10,0,0,8,10,0,0,5,5,5,5,5,0,0,0,4,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,5,5],"n":["assert_error_match","mdo","utils","macros","sagoj0_","tanacchi","error","hkt","io_util","parse_util","InvalidInputError","LackOfInputOnParseError","OverflowError","QuizSolveError","QuizSolveErrorValue","borrow","borrow","borrow_mut","borrow_mut","eq","eq","fmt","fmt","fmt","from","from","from_subset","from_subset","into","into","invalid_input_error","is_in_subset","is_in_subset","ne","to_string","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","0","err_msg","value","applicative","functor","monad","Applicative","apply","lift_a2","option","pure","result","Functor","fmap","option","result","Monad","bind","option","result","io_handler","parse_from_iter","parse_to_tuple_vec","parse_to_vec","try_parse","error","parser","stream","Error","InvalidInputError","LackOfInputElemsError","OverflowError","borrow","borrow_mut","eq","fmt","fmt","from","from_subset","into","is_in_subset","ne","to_string","to_subset","to_subset_unchecked","try_from","try_into","type_id","vzip","0","parse_from_iter","apply"],"q":["rust_quiz_2021","","","rust_quiz_2021::utils","","","rust_quiz_2021::utils::sagoj0_","","","","rust_quiz_2021::utils::sagoj0_::error","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rust_quiz_2021::utils::sagoj0_::error::QuizSolveError","","","rust_quiz_2021::utils::sagoj0_::hkt","","","rust_quiz_2021::utils::sagoj0_::hkt::applicative","","","","","","rust_quiz_2021::utils::sagoj0_::hkt::functor","","","","rust_quiz_2021::utils::sagoj0_::hkt::monad","","","","rust_quiz_2021::utils::sagoj0_::io_util","rust_quiz_2021::utils::sagoj0_::parse_util","","","","rust_quiz_2021::utils::tanacchi","","","rust_quiz_2021::utils::tanacchi::error","","","","","","","","","","","","","","","","","","","","","rust_quiz_2021::utils::tanacchi::error::Error","rust_quiz_2021::utils::tanacchi::parser","rust_quiz_2021::utils::tanacchi::stream"],"d":["anyhowのエラーをダウンキャストし， …","…","問題回答用の自作ライブラリモジュール． …","任意のマクロを配置する．","","","rust_quizの実装で用いるエラーを定義する. …","","…","…","…","入力が足りない際のエラー","オーバフローが起こった際のエラー","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","関数適用を一般的に扱うためのトレイト","…","…","","一般の値を文脈に包んで返却する","","変換処理を一般的に扱うためのトレイト","Mという構造の中身に対して関数を適用する","","","","","","","…","…","","指定した長さ<code>len</code>分だけイテレータを消費し …","…","エラー周りの定義","","入出力関連のユーティリティ","","入力が不正のとき（メッセージ付き）","入力の数が不正のときのエラー","数値がオーバフローしたときのエラー","","","","","","","","","","","","","","","","","","","","src から入力を読んで その入力を f …"],"i":[0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,2,1,2,1,2,1,2,1,1,2,1,2,1,2,1,1,2,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,3,4,4,0,0,0,0,5,5,0,5,0,0,6,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,9,0,0],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[["quizsolveerrorvalue",3]],["bool",15]],[[["quizsolveerror",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[["str",15]]],[[],["bool",15]],[[],["bool",15]],[[["quizsolveerror",4]],["bool",15]],[[],["string",3]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],null,null,null,null,null,null,null,[[]],[[]],null,[[]],null,null,[[]],null,null,null,[[]],null,null,[[],["result",6]],[[],["result",6]],[[["usize",15]],[["result",6,["vec"]],["vec",3]]],[[["usize",15]],[["vec",3],["result",6,["vec"]]]],[[["str",15]],["result",6]],null,null,null,null,null,null,null,[[]],[[]],[[["error",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[],["bool",15]],[[["error",4]],["bool",15]],[[],["string",3]],[[],["option",4]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,[[],["result",6]],[[],["result",6]]],"p":[[4,"QuizSolveError"],[3,"QuizSolveErrorValue"],[13,"OverflowError"],[13,"InvalidInputError"],[8,"Applicative"],[8,"Functor"],[8,"Monad"],[4,"Error"],[13,"InvalidInputError"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};